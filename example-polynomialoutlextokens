
[inlinecmt, // ====== member function implementations ====== //, 3] 
[function, function, 4] [id, POLYNOMIAL, 4] [scopeop, ::, 4] [id, evaluate, 4] [openpar, (, 4] [id, x, 4] [colon, :, 4] [float, float, 4] [closepar, ), 4] [returntype, =>, 4] [float, float, 4] 
[opencubr, {, 5] 
[return, return, 6] [openpar, (, 6] [intnum, 0, 6] [closepar, ), 6] [semi, ;, 6] 
[closecubr, }, 7] 
[function, function, 9] [id, QUADRATIC, 9] [scopeop, ::, 9] [id, evaluate, 9] [openpar, (, 9] [id, x, 9] [colon, :, 9] [float, float, 9] [closepar, ), 9] [returntype, =>, 9] [float, float, 9] 
[opencubr, {, 10] 
[localvar, localvar, 11] [id, result, 11] [colon, :, 11] [float, float, 11] [semi, ;, 11] 
[inlinecmt, //Using Horner's method, 12] 
[id, result, 13] [assign, =, 13] [id, a, 13] [semi, ;, 13] 
[id, result, 14] [assign, =, 14] [id, result, 14] [mult, *, 14] [id, x, 14] [plus, +, 14] [id, b, 14] [semi, ;, 14] 
[id, result, 15] [assign, =, 15] [id, result, 15] [mult, *, 15] [id, x, 15] [plus, +, 15] [id, c, 15] [semi, ;, 15] 
[return, return, 16] [openpar, (, 16] [id, result, 16] [closepar, ), 16] [semi, ;, 16] 
[closecubr, }, 17] 
[function, function, 19] [id, QUADRATIC, 19] [scopeop, ::, 19] [constructor, constructor, 19] [openpar, (, 19] [id, A, 19] [colon, :, 19] [float, float, 19] [comma, ,, 19] [id, B, 19] [colon, :, 19] [float, float, 19] [comma, ,, 19] [id, C, 19] [colon, :, 19] [float, float, 19] [closepar, ), 19] 
[opencubr, {, 20] 
[id, a, 21] [assign, =, 21] [id, A, 21] [semi, ;, 21] 
[id, b, 22] [assign, =, 22] [id, B, 22] [semi, ;, 22] 
[id, c, 23] [assign, =, 23] [id, C, 23] [semi, ;, 23] 
[closecubr, }, 24] 
[function, function, 26] [id, LINEAR, 26] [scopeop, ::, 26] [constructor, constructor, 26] [openpar, (, 26] [id, A, 26] [colon, :, 26] [float, float, 26] [comma, ,, 26] [id, B, 26] [colon, :, 26] [float, float, 26] [closepar, ), 26] 
[opencubr, {, 27] 
[id, a, 28] [assign, =, 28] [id, A, 28] [semi, ;, 28] 
[id, b, 29] [assign, =, 29] [id, B, 29] [semi, ;, 29] 
[closecubr, }, 30] 
[function, function, 32] [id, LINEAR, 32] [scopeop, ::, 32] [id, evaluate, 32] [openpar, (, 32] [id, x, 32] [colon, :, 32] [float, float, 32] [closepar, ), 32] [returntype, =>, 32] [float, float, 32] 
[opencubr, {, 33] 
[localvar, localvar, 34] [id, result, 34] [colon, :, 34] [float, float, 34] [semi, ;, 34] 
[id, result, 35] [assign, =, 35] [floatnum, 0.0, 35] [semi, ;, 35] 
[id, result, 36] [assign, =, 36] [id, a, 36] [mult, *, 36] [id, x, 36] [plus, +, 36] [id, b, 36] [semi, ;, 36] 
[return, return, 37] [openpar, (, 37] [id, result, 37] [closepar, ), 37] [semi, ;, 37] 
[closecubr, }, 38] 
[inlinecmt, // ====== struct declarations ====== //, 40] 
[class, class, 41] [id, POLYNOMIAL, 41] [opencubr, {, 41] 
[public, public, 42] [function, function, 42] [id, evaluate, 42] [colon, :, 42] [openpar, (, 42] [id, x, 42] [colon, :, 42] [float, float, 42] [closepar, ), 42] [returntype, =>, 42] [float, float, 42] [semi, ;, 42] 
[closecubr, }, 43] [semi, ;, 43] 
[class, class, 45] [id, LINEAR, 45] [isa, isa, 45] [id, POLYNOMIAL, 45] [opencubr, {, 45] 
[private, private, 46] [attribute, attribute, 46] [id, a, 46] [colon, :, 46] [float, float, 46] [semi, ;, 46] 
[private, private, 47] [attribute, attribute, 47] [id, b, 47] [colon, :, 47] [float, float, 47] [semi, ;, 47] 
[public, public, 48] [constructor, constructor, 48] [colon, :, 48] [openpar, (, 48] [id, A, 48] [colon, :, 48] [float, float, 48] [comma, ,, 48] [id, B, 48] [colon, :, 48] [float, float, 48] [closepar, ), 48] [semi, ;, 48] 
[public, public, 49] [function, function, 49] [id, evaluate, 49] [colon, :, 49] [openpar, (, 49] [id, x, 49] [colon, :, 49] [float, float, 49] [closepar, ), 49] [returntype, =>, 49] [float, float, 49] [semi, ;, 49] 
[closecubr, }, 50] [semi, ;, 50] 
[class, class, 52] [id, QUADRATIC, 52] [isa, isa, 52] [id, POLYNOMIAL, 52] [opencubr, {, 52] 
[private, private, 53] [attribute, attribute, 53] [id, a, 53] [colon, :, 53] [float, float, 53] [semi, ;, 53] 
[private, private, 54] [attribute, attribute, 54] [id, b, 54] [colon, :, 54] [float, float, 54] [semi, ;, 54] 
[private, private, 55] [attribute, attribute, 55] [id, c, 55] [colon, :, 55] [float, float, 55] [semi, ;, 55] 
[public, public, 56] [constructor, constructor, 56] [colon, :, 56] [openpar, (, 56] [id, A, 56] [colon, :, 56] [float, float, 56] [comma, ,, 56] [id, B, 56] [colon, :, 56] [float, float, 56] [comma, ,, 56] [id, C, 56] [colon, :, 56] [float, float, 56] [closepar, ), 56] [semi, ;, 56] 
[public, public, 57] [function, function, 57] [id, evaluate, 57] [colon, :, 57] [openpar, (, 57] [id, x, 57] [colon, :, 57] [float, float, 57] [closepar, ), 57] [returntype, =>, 57] [float, float, 57] [semi, ;, 57] 
[closecubr, }, 58] [semi, ;, 58] 
[inlinecmt, // ====== main ====== //, 60] 
[function, function, 61] [id, main, 61] [openpar, (, 61] [closepar, ), 61] [returntype, =>, 61] [void, void, 61] 
[opencubr, {, 62] 
[localvar, localvar, 63] [id, f1, 63] [colon, :, 63] [id, LINEAR, 63] [openpar, (, 63] [intnum, 2, 63] [comma, ,, 63] [floatnum, 3.5, 63] [closepar, ), 63] [semi, ;, 63] 
[localvar, localvar, 64] [id, f2, 64] [colon, :, 64] [id, QUADRATIC, 64] [openpar, (, 64] [minus, -, 64] [floatnum, 2.0, 64] [comma, ,, 64] [floatnum, 1.0, 64] [comma, ,, 64] [floatnum, 0.0, 64] [closepar, ), 64] [semi, ;, 64] 
[localvar, localvar, 65] [id, counter, 65] [colon, :, 65] [integer, integer, 65] [semi, ;, 65] 
[while, while, 67] [openpar, (, 67] [id, counter, 67] [leq, <=, 67] [intnum, 10, 67] [closepar, ), 67] 
[opencubr, {, 68] 
[write, write, 69] [openpar, (, 69] [id, counter, 69] [closepar, ), 69] [semi, ;, 69] 
[write, write, 70] [openpar, (, 70] [id, f1, 70] [dot, ., 70] [id, evaluate, 70] [openpar, (, 70] [id, counter, 70] [closepar, ), 70] [closepar, ), 70] [semi, ;, 70] 
[write, write, 71] [openpar, (, 71] [id, f2, 71] [dot, ., 71] [id, evaluate, 71] [openpar, (, 71] [id, counter, 71] [closepar, ), 71] [closepar, ), 71] [semi, ;, 71] 
[closecubr, }, 72] [semi, ;, 72] 
[closecubr, }, 73] 
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array\n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array\n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 74] 