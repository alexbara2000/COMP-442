MOON listing of ../../../example-main3.m.

    1     0 % start
    2     0            entry
    3     0            addi   r14,r0,topaddr  % Set stack pointer
    4     4 
    5     4            %assigning values
    6     4            sub r9,r9,r9
    7     8            addi r9,r9,7
    8    12            sw t1(r0),r9
    9    16 
   10    16 
   11    16            %assigning values
   12    16            sub r9,r9,r9
   13    20            addi r9,r9,0
   14    24            sw t2(r0),r9
   15    28 
   16    28 
   17    28            %assigning values
   18    28            sub r9,r9,r9
   19    32            addi r9,r9,64
   20    36            sw t3(r0),r9
   21    40 
   22    40 
   23    40            %assigning values
   24    40            lw r1,t2(r0)
   25    44            muli r2,r1,4
   26    48            lw r9,t3(r2)
   27    52            sw arr(r0),r9
   28    56 
   29    56 
   30    56            %assigning values
   31    56            sub r9,r9,r9
   32    60            addi r9,r9,1
   33    64            sw t4(r0),r9
   34    68 
   35    68 
   36    68            %assigning values
   37    68            sub r9,r9,r9
   38    72            addi r9,r9,34
   39    76            sw t5(r0),r9
   40    80 
   41    80 
   42    80            %assigning values
   43    80            lw r1,t4(r0)
   44    84            muli r2,r1,4
   45    88            lw r9,t5(r2)
   46    92            sw arr(r0),r9
   47    96 
   48    96 
   49    96            %assigning values
   50    96            sub r9,r9,r9
   51   100            addi r9,r9,2
   52   104            sw t6(r0),r9
   53   108 
   54   108 
   55   108            %assigning values
   56   108            sub r9,r9,r9
   57   112            addi r9,r9,25
   58   116            sw t7(r0),r9
   59   120 
   60   120 
   61   120            %assigning values
   62   120            lw r1,t6(r0)
   63   124            muli r2,r1,4
   64   128            lw r9,t7(r2)
   65   132            sw arr(r0),r9
   66   136 
   67   136 
   68   136            %assigning values
   69   136            sub r9,r9,r9
   70   140            addi r9,r9,3
   71   144            sw t8(r0),r9
   72   148 
   73   148 
   74   148            %assigning values
   75   148            sub r9,r9,r9
   76   152            addi r9,r9,12
   77   156            sw t9(r0),r9
   78   160 
   79   160 
   80   160            %assigning values
   81   160            lw r1,t8(r0)
   82   164            muli r2,r1,4
   83   168            lw r9,t9(r2)
   84   172            sw arr(r0),r9
   85   176 
   86   176 
   87   176            %assigning values
   88   176            sub r9,r9,r9
   89   180            addi r9,r9,4
   90   184            sw t10(r0),r9
   91   188 
   92   188 
   93   188            %assigning values
   94   188            sub r9,r9,r9
   95   192            addi r9,r9,22
   96   196            sw t11(r0),r9
   97   200 
   98   200 
   99   200            %assigning values
  100   200            lw r1,t10(r0)
  101   204            muli r2,r1,4
  102   208            lw r9,t11(r2)
  103   212            sw arr(r0),r9
  104   216 
  105   216 
  106   216            %assigning values
  107   216            sub r9,r9,r9
  108   220            addi r9,r9,5
  109   224            sw t12(r0),r9
  110   228 
  111   228 
  112   228            %assigning values
  113   228            sub r9,r9,r9
  114   232            addi r9,r9,11
  115   236            sw t13(r0),r9
  116   240 
  117   240 
  118   240            %assigning values
  119   240            lw r1,t12(r0)
  120   244            muli r2,r1,4
  121   248            lw r9,t13(r2)
  122   252            sw arr(r0),r9
  123   256 
  124   256 
  125   256            %assigning values
  126   256            sub r9,r9,r9
  127   260            addi r9,r9,6
  128   264            sw t14(r0),r9
  129   268 
  130   268 
  131   268            %assigning values
  132   268            sub r9,r9,r9
  133   272            addi r9,r9,90
  134   276            sw t15(r0),r9
  135   280 
  136   280 
  137   280            %assigning values
  138   280            lw r1,t14(r0)
  139   284            muli r2,r1,4
  140   288            lw r9,t15(r2)
  141   292            sw arr(r0),r9
  142   296 
  143   296 
  144   296            %assigning values
  145   296            sub r9,r9,r9
  146   300            addi r9,r9,0
  147   304            sw t16(r0),r9
  148   308 
  149   308 
  150   308            %assigning values in factor
  151   308            lw r1,t16(r0)
  152   312            muli r2,r1,4
  153   316            lw r9,arr(r2)
  154   320 
  155   320 
  156   320            %assigning values
  157   320            lw r9,arr(r0)
  158   324            sw x(r0),r9
  159   328 
  160   328 
  161   328            % processing: put(x)
  162   328            lw r1,x(r0)
  163   332            % put value on stack
  164   332            sw -8(r14),r1
  165   336            % link buffer to stack
  166   336            addi r1,r0, buf
  167   340            sw -12(r14),r1
  168   344            % convert int to string for output
  169   344            jl r15, intstr
  170   348            sw -8(r14),r13
  171   352            % output to console
  172   352            jl r15, putstr
  173   356 
  174   356            hlt
  175   360 % space for variable buffer
  176   360 buf     res 20
  177   380 % space for variable x
  178   380 x       res 4
  179   384 % space for variable arr
  180   384 arr     res 4
  181   388 % space for variable t1
  182   388 t1      res 4
  183   392 % space for variable t2
  184   392 t2      res 4
  185   396 % space for variable t3
  186   396 t3      res 4
  187   400 % space for variable t4
  188   400 t4      res 4
  189   404 % space for variable t5
  190   404 t5      res 4
  191   408 % space for variable t6
  192   408 t6      res 4
  193   412 % space for variable t7
  194   412 t7      res 4
  195   416 % space for variable t8
  196   416 t8      res 4
  197   420 % space for variable t9
  198   420 t9      res 4
  199   424 % space for variable t10
  200   424 t10     res 4
  201   428 % space for variable t11
  202   428 t11     res 4
  203   432 % space for variable t12
  204   432 t12     res 4
  205   436 % space for variable t13
  206   436 t13     res 4
  207   440 % space for variable t14
  208   440 t14     res 4
  209   444 % space for variable t15
  210   444 t15     res 4
  211   448 % space for variable t16
  212   448 t16     res 4

MOON listing of lib.m.

    1   452 % A Simple MOON Library
    2   452 % Author: Peter Grogono
    3   452 % Last modified: 27 Jan 1995
    4   452 
    5   452 % Conventions
    6   452 %   r14 is the Stack Pointer
    7   452 %   -4(r14) is used to store the link, if necessary.
    8   452 %   -8(r14) contains the first argument.
    9   452 %   -12(r14) contains the second argument, and so on.
   10   452 %   r15 contains the link.
   11   452 %   r13 contains the result of a function.
   12   452 
   13   452 %   Strings are null terminated.  Strings are passed and returned to
   14   452 %   library functions as pointers.  It is the caller's responsibility to
   15   452 %   provide storage for strings.
   16   452 
   17   452 %   "->" is read "points to".
   18   452 
   19   452           align               % In case previous file misaligned
   20   452 
   21   452 % Write a string to stdout.
   22   452 % Entry: -8(r14) -> string argument.
   23   452 
   24   452 putstr    lw    r1,-8(r14)    % i := r1
   25   456           addi  r2,r0,0
   26   460 putstr1   lb    r2,0(r1)      % ch := B[i]
   27   464           ceqi  r3,r2,0
   28   468           bnz   r3,putstr2    % branch if ch = 0
   29   472           putc  r2
   30   476           addi  r1,r1,1       % i++
   31   480           j     putstr1
   32   484 putstr2   jr    r15
   33   488 
   34   488 % Read a string from stdin.  Read until CR (ASCII 13) but do not store
   35   488 % the CR.
   36   488 % Entry: -8(r14) -> buffer.
   37   488 
   38   488 getstr    lw    r1,-8(r14)    % i := r1
   39   492 getstr1   getc  r2            % get ch
   40   496           ceqi  r3,r2,10
   41   500           bnz   r3,getstr2    % branch if ch = CR
   42   504           sb    0(r1),r2      % B[i] := ch
   43   508           addi  r1,r1,1       % i++
   44   512           j     getstr1
   45   516 getstr2   sb    0(r1),r0      % B[i] := '\0'
   46   520           jr    r15
   47   524 
   48   524 % Convert string to integer.  Skip leading blanks.  Accept leading sign.
   49   524 % Entry: -8(r14) -> string.
   50   524 % Exit:  result in r13
   51   524 
   52   524 strint    addi  r13,r0,0      % R := 0 (result)
   53   528           addi  r4,r0,0       % S := 0 (sign)
   54   532           lw    r1,-8(r14)    % i := r1
   55   536           addi  r2,r0,0
   56   540 strint1   lb    r2,0(r1)      % ch := B[i]
   57   544           cnei  r3,r2,32
   58   548           bnz   r3,strint2    % branch if ch != blank
   59   552           addi  r1,r1,1
   60   556           j     strint1
   61   560 strint2   cnei  r3,r2,43
   62   564           bnz   r3,strint3    % branch if ch != "+"
   63   568           j     strint4
   64   572 strint3   cnei  r3,r2,45
   65   576           bnz   r3,strint5    % branch if ch != "-"
   66   580           addi  r4,r4,1       % S := 1
   67   584 strint4   addi  r1,r1,1       % i++
   68   588           lb    r2,0(r1)      % ch := B[i]
   69   592 strint5   clti  r3,r2,48
   70   596           bnz   r3,strint6    % branch if ch < "0"
   71   600           cgti  r3,r2,57
   72   604           bnz   r3,strint6    % branch if ch > "9"
   73   608           subi  r2,r2,48      % ch -= "0"
   74   612           muli  r13,r13,10    % R *= 10
   75   616           add   r13,r13,r2    % R += ch
   76   620           j     strint4
   77   624 strint6   ceqi  r3,r4,0
   78   628           bnz   r3,strint7    % branch if S = 0
   79   632           sub   r13,r0,r13    % R := -R
   80   636 strint7   jr    r15
   81   640 
   82   640 % Convert signed integer to string.
   83   640 % Entry: -8(r14) is the integer.
   84   640 %        -12(r14) -> buffer containing at least 12 bytes.
   85   640 % Exit:  r13 -> first character of result string.
   86   640 
   87   640 intstr    lw    r13,-12(r14)
   88   644           addi  r13,r13,11    % r13 points to end of buffer
   89   648           sb    0(r13),r0     % store terminator
   90   652           lw    r1,-8(r14)    % r1 := N (to be converted)
   91   656           addi  r2,r0,0       % S := 0 (sign)
   92   660           cgei  r3,r1,0
   93   664           bnz   r3,intstr1    % branch if N >= 0
   94   668           addi  r2,r2,1       % S := 1
   95   672           sub   r1,r0,r1      % N := -N
   96   676 intstr1   addi  r3,r1,0       % D := N (next digit)
   97   680           modi  r3,r3,10      % D mod= 10
   98   684           addi  r3,r3,48      % D += "0"
   99   688           subi  r13,r13,1     % i--
  100   692           sb    0(r13),r3     % B[i] := D
  101   696           divi  r1,r1,10      % N div= 10
  102   700           cnei  r3,r1,0
  103   704           bnz   r3,intstr1    % branch if N != 0
  104   708           ceqi  r3,r2,0
  105   712           bnz   r3,intstr2    % branch if S = 0
  106   716           subi  r13,r13,1     % i--
  107   720           addi  r3,r0,45
  108   724           sb    0(r13),r3     % B[i] := "-"
  109   728 intstr2   jr    r15
  110   732 
  111   732 % Return length of string.
  112   732 % Entry: -8(r14) -> string.
  113   732 % Exit:  r13 = length of string.
  114   732 
  115   732 lenstr   lw    r1,-8(r14)     % i -> string
  116   736          addi  r13,r0,0       % L := 0
  117   740          addi  r2,r0,0
  118   744 lenstr1  lb    r2,0(r1)       % ch := B[i]
  119   748          ceqi  r3,r2,0
  120   752          bnz   r3,lenstr2     % branch if ch = 0
  121   756          addi  r13,r13,1      % L++
  122   760          addi  r1,r1,1        % i++
  123   764          j     lenstr1
  124   768 lenstr2  jr    r15
  125   772 
  126   772 % Concatenate strings: Z := X + Y.
  127   772 % Entry:   -8(r14)  ->  X
  128   772 %         -12(r14)  ->  Y
  129   772 %         -16(r14)  ->  Z
  130   772 % The result string is assumed to be large enough to hold the result.
  131   772 
  132   772 strcat   lw    r1,-16(r14)    % r1 -> Z
  133   776          lw    r2,-8(r14)     % r2 -> X
  134   780          addi  r3,r0,0        % r3 = current character
  135   784 strcat1  lb    r3,0(r2)       % char from X
  136   788          ceqi  r4,r3,0
  137   792          bnz   r4,strcat2     % branch at end of X
  138   796          sb    0(r1),r3       % copy char to Z
  139   800          addi  r1,r1,1
  140   804          addi  r2,r2,1
  141   808          j     strcat1
  142   812 strcat2  lw    r2,-12(r14)    % r2 -> Y
  143   816 strcat3  lb    r3,0(r2)       % char from Y
  144   820          ceqi  r4,r3,0
  145   824          bnz   r4,strcat4     % branch at end of Y
  146   828          sb    0(r1),r3       % copy char to Z
  147   832          addi  r1,r1,1
  148   836          addi  r2,r2,1
  149   840          j     strcat3
  150   844 strcat4  sb    0(r1),r0       % Store terminator
  151   848          jr    r15
  152   852 
  153   852 % The string comparison functions all use strcmp, defined below.
  154   852 % They are all short; a smart compiler could generate this code
  155   852 % directly, avoiding the overhead of an extra level of function
  156   852 % call.
  157   852 % For each function:
  158   852 % Entry: -8(r14)  -> string A
  159   852 %        -12(r14) -> string B
  160   852 % Exit:  r13 = 1 for true and 0 for false.
  161   852 % Note that r11 is used for the link to avoid saving r15.
  162   852 
  163   852 streq    jl    r11,strcmp
  164   856          lw    r13,eq(r13)
  165   860          jr    r15
  166   864 eq       dw    1,0,0
  167   876 
  168   876 strne    jl    r11,strcmp
  169   880          lw    r13,ne(r13)
  170   884          jr    r15
  171   888 ne       dw    0,1,1
  172   900 
  173   900 strlt    jl    r11,strcmp
  174   904          lw    r13,lt(r13)
  175   908          jr    r15
  176   912 lt       dw    0,1,0
  177   924 
  178   924 strle    jl    r11,strcmp
  179   928          lw    r13,le(r13)
  180   932          jr    r15
  181   936 le       dw    1,1,0
  182   948 
  183   948 strgt    jl    r11,strcmp
  184   952          lw    r13,gt(r13)
  185   956          jr    r15
  186   960 gt       dw    0,0,1
  187   972 
  188   972 strge    jl    r11,strcmp
  189   976          lw    r13,ge(r13)
  190   980          jr    r15
  191   984 ge       dw    1,0,1
  192   996 
  193   996 % Compare strings.
  194   996 % Entry: -8(r14)  -> string A
  195   996 %        -12(r14) -> string B
  196   996 %             ( 0   if A = B
  197   996 % Exit: r13 = < 4   if A < B
  198   996 %             ( 8   if A > B
  199   996 % Note that r11 is the link.
  200   996 
  201   996 strcmp   lw    r1,-8(r14)
  202  1000          lw    r2,-12(r14)
  203  1004          addi  r3,r0,0
  204  1008          addi  r4,r0,0
  205  1012 strcmp1  lb    r3,0(r1)       % get A[i]
  206  1016          lb    r4,0(r2)       % get B[j]
  207  1020          ceqi  r5,r3,0
  208  1024          bnz   r5,strcmp2     % branch if end of A
  209  1028          ceqi  r5,r4,0
  210  1032          bnz   r5,strcmp4     % branch if end of B
  211  1036          ceq   r5,r3,r4
  212  1040          bz    r5,strcmp3     % branch if A[i] != B[i]
  213  1044          addi  r1,r1,1        % i++
  214  1048          addi  r2,r2,1        % j++
  215  1052          j     strcmp1
  216  1056 strcmp2  ceqi  r5,r4,0
  217  1060          bz    r5,strcmp5     % branch if not end of B
  218  1064          addi  r13,r0,0       % A = B
  219  1068          jr    r11
  220  1072 strcmp3  clt   r5,r3,r4
  221  1076          bnz   r5,strcmp5     % branch if A[i] < B[i]
  222  1080 strcmp4  addi  r13,r0,8       % A > B
  223  1084          jr    r11
  224  1088 strcmp5  addi  r13,r0,4       % A < B
  225  1092          jr    r11
  226  1096 
  227  1096 % String indexing: return the string S[M].  The value is returned as a
  228  1096 % string rather than as a character for compatibility with other string
  229  1096 % processing functions.  Also, we must distinguish the empty string
  230  1096 % from a character.
  231  1096 % Entry: -8(r14)  -> S
  232  1096 %        -12(r14) -> M
  233  1096 %        -16(r14) -> T, the output string.
  234  1096 % Exit:  the output string contains the selected character, or is null.
  235  1096 
  236  1096 stridx   lw    r1,-8(r14)    % i
  237  1100          lw    r2,-12(r14)
  238  1104          lw    r3,-16(r14)
  239  1108          subi  r2,r2,1
  240  1112          addi  r4,r0,0
  241  1116 stridx1  lb    r4,0(r1)      % ch := S[i]
  242  1120          ceqi  r5,r4,0
  243  1124          bnz   r5,stridx3    % branch if ch = 0
  244  1128          cge   r5,r1,r2
  245  1132          bnz   r5,stridx2    % branch if i >= M
  246  1136          addi  r1,r1,1       % i++
  247  1140          j     stridx1
  248  1144 stridx2  sb    0(r3),r4      % T[0] := S[M]
  249  1148          addi  r3,r3,1
  250  1152 stridx3  sb    0(r3),r0      % T[k] := 0
  251  1156          jr    r15
  252  1160 
  253  1160 % String indexing: return the string S[M..N].
  254  1160 % Entry: -8(r14)  -> S
  255  1160 %        -12(r14) -> M
  256  1160 %        -16(r14) -> N
  257  1160 %        -20(r14) -> T, the output string.
  258  1160 % Exit:  the output string contains the selected substring, or is null.
  259  1160 
  260  1160 strsub   lw    r1,-8(r14)
  261  1164          lw    r2,-12(r14)
  262  1168          lw    r3,-16(r14)
  263  1172          lw    r4,-20(r14)
  264  1176          subi  r2,r2,1
  265  1180          subi  r3,r3,1
  266  1184          addi  r5,r0,0
  267  1188 strsub1  lb    r5,0(r1)      % ch := S[i]
  268  1192          ceqi  r6,r5,0
  269  1196          bnz   r6,strsub3    % branch if ch = 0
  270  1200          clt   r6,r1,r2
  271  1204          bnz   r6,strsub2    % branch if i < M
  272  1208          cgt   r6,r1,r3
  273  1212          bnz   r6,strsub3    % branch if i > N
  274  1216          sb    0(r3),r5      % T[k] := S[i]
  275  1220          addi  r3,r3,1       % k++
  276  1224 strsub2  addi  r1,r1,1       % i++
  277  1228          j     strsub1
  278  1232 strsub3  sb    0(r3),r0      % T[k] := 0
  279  1236          jr    r15
  280  1240 

